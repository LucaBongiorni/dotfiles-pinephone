# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(True)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set("content.cookies.accept", "all", "chrome-devtools://*")
config.set("content.cookies.accept", "all", "devtools://*")

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}",
    "https://web.whatsapp.com/",
)
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}",
    "https://accounts.google.com/*",
)
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36",
    "https://*.slack.com/*",
)

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "chrome-devtools://*")
config.set("content.images", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome-devtools://*")
config.set("content.javascript.enabled", True, "devtools://*")
config.set("content.javascript.enabled", True, "chrome://*/*")
config.set("content.javascript.enabled", True, "qute://*/*")

config.set("auto_save.session", True)
config.set("auto_save.interval", 60000)

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
config.set("tabs.position", "bottom")
config.set("tabs.show", "multiple")

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set("content.headers.accept_language", "fr-FR,en-US")
config.set("content.headers.do_not_track", True)
config.set("content.javascript.enabled", False)
config.set("content.cookies.accept", "no-3rdparty")
config.set("qt.force_platformtheme", "gtk2")
config.set("downloads.position", "bottom")
# config.set("tabs.background", True)
config.set("colors.webpage.preferred_color_scheme", "auto")
config.set("colors.webpage.darkmode.enabled", False)
config.set("content.default_encoding", "utf-8")

config.set("editor.command", ["st", "-e", "nvim", "{}"])
config.set("downloads.location.directory", "~/SD/Téléchargements")
config.set("url.default_page", "https://start.duckduckgo.com")

config.set(
    "url.searchengines",
    {
        "DEFAULT": "https://duckduckgo.com/?q={}",
        "s": "https://www.startpage.com/do/search?query={}",
        "sp": "https://www.startpage.com/do/search?query={}",
        "g": "https://www.google.fr/search?q={}",
        "d": "https://duckduckgo.com/?q={}",
        "di": "https://duckduckgo.com/?ia=images&iax=images&q={}",
        "qw": "https://qwant.com/?q={}&t=web",
        "qwi": "https://qwant.com/?q={}&t=images",
        "gi": "https://www.google.fr/search?q={}&tbm=isch",
        "lfm": "https://www.last.fm/fr/search?q={}",
        "lfmd": "https://www.last.fm/fr/music/{}",
        "rym": "https://rateyourmusic.com/search?searchtype=a&searchterm={}",
        "rymd": "https://rateyourmusic.com/artist/{}",
        "scr": "https://www.senscritique.com/search?q={}",
        "map": "https://www.google.fr/maps/?q={}",
        "eba": "https://www.ebay.fr/sch/i.html?_nkw={}",
        "twi": "https://twitter.com/search?q={}",
        "yt": "https://youtube.com/results?search_query={}",
        "rarbg": "https://rarbg.to/torrents.php?search={}",
        "aur": "https://aur.archlinux.org/packages/?K={}",
        "arch": "https://www.archlinux.org/packages/?q={}",
        "gplay": "https://play.google.com/store/search?q={}",
        "ali": "https://fr.aliexpress.com/wholesale?SearchText={}",
        "wiki": "https://fr.wikipedia.org/w/index.php?search={}",
        "ldlc": "https://www.ldlc.com/navigation/{}",
        "ama": "https://www.amazon.fr/s?k={}",
        "wikien": "https://en.wikipedia.org/w/index.php?search={}",
        "git": "https://github.com/search?q={}",
        "rut": "https://rutracker.org/forum/tracker.php?nm={}",
        "steam": "https://store.steampowered.com/search/?term={}",
        "deal": "https://www.dealabs.com/search?q={}",
        "protondb": "https://www.protondb.com/search?q={}",
        "archwikifr": "https://wiki.archlinux.fr/index.php?search={}",
        "archwiki": "https://wiki.archlinux.org/index.php?search={}",
        "discogs": "https://www.discogs.com/search/?q={}&type=all",
        "musicbrainz": "https://musicbrainz.org/search?query={}&type=artist&method=indexed",
        "leboncoin": "https://www.leboncoin.fr/recherche/?text={}",
        "userbenchmark": "https://www.userbenchmark.com/Search?searchTerm={}",
        "idealo": "https://www.idealo.fr/prechcat.html?q={}",
        "gsmarena": "https://www.gsmarena.com/res.php3?sSearch={}",
        "xda": "https://forum.xda-developers.com/search/?query={}",
        "reddit": "https://www.reddit.com/search?q={}&sort=relevance&t=all",
        "subreddit": "https://www.reddit.com/r/{}",
        "fdroid": "https://search.f-droid.org/?q={}",
        "ug": "https://www.ultimate-guitar.com/search.php?search_type=title&value={}",
        "scholar": "https://scholar.google.fr/scholar?hl=fr&q={}",
        "libgen": "http://www.libgen.is/search.php?req={}",
        "scihub": "https://sci-hub.tw/{}",
        "trend": "https://trends.google.fr/trends/explore?q={}",
        "stack": "https://stackoverflow.com/search?q={}",
        "osm": "https://www.openstreetmap.org/search?query={}",
        "goodreads": "https://www.goodreads.com/search?q={}",
        "firefoxadd": "https://addons.mozilla.org/fr/firefox/search/?q={}",
        "thomann": "https://www.thomann.de/fr/search_dir.html?sw={}",
        "linguee": "https://www.linguee.fr/francais-anglais/search?source=auto&query={}",
        "lingueeen": "https://www.linguee.fr/francais-anglais/search?source=anglais&query={}",
        "pypi": "https://pypi.org/search/?q={}",
        "openrepos": "https://openrepos.net/search/node/{}",
        "rymv": "https://rateyourmusic.com/search?searchtype=F&searchterm={}",
        "unsplash": "https://unsplash.com/search/photos/{}",
        "alternativeto": "https://alternativeto.net/software/{}",
        "gitlab": "https://gitlab.com/search?search={}",
        "framagit": "https://framagit.org/search?search={}",
        "imdb": "https://www.imdb.com/find?ref_=nv_sr_fn&q={}&s=all",
    },
)

config.set(
    "bindings.commands",
    {
        "insert": {
            "<Ctrl-f>": "fake-key <Right>",
            "<Ctrl-b>": "fake-key <Left>",
            "<Ctrl-a>": "fake-key <Home>",
            "<Ctrl-e>": "fake-key <End>",
            "<Ctrl-n>": "fake-key <Down>",
            "<Ctrl-p>": "fake-key <Up>",
            "<Alt-v>": "fake-key <PgUp>",
            "<Ctrl-v>": "fake-key <PgDown>",
            "<Alt-f>": "fake-key <Ctrl-Right>",
            "<Alt-b>": "fake-key <Ctrl-Left>",
            "<Ctrl-d>": "fake-key <Delete>",
            "<Alt-d>": "fake-key <Ctrl-Delete>",
            "<Alt-Backspace>": "fake-key <Ctrl-Backspace>",
            "<Ctrl-y>": "insert-text {primary}",
        }
    },
)

# umpv bindigs
config.bind(
    ",M",
    "spawn ~/scripts/umpv.py {url}",
)
config.bind(
    ",m",
    "hint links spawn ~/scripts/umpv.py {hint-url}",
)
config.bind(
    ";m",
    "hint --rapid links spawn ~/scripts/umpv.py {hint-url}",
)

config.bind(",ce", "config-edit")

# Reddit bindings
config.bind(",rn", "open {url}new")
config.bind(",rh", "open {url}hot")
config.bind(",rth", "open {url}top/?sort=top&t=hour")
config.bind(",rtd", "open {url}top/?sort=top&t=day")
config.bind(",rtw", "open {url}top/?sort=top&t=week")
config.bind(",rtm", "open {url}top/?sort=top&t=month")
config.bind(",rty", "open {url}top/?sort=top&t=year")
config.bind(",rta", "open {url}top/?sort=top&t=all")
